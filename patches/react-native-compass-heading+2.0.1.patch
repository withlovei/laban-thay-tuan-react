diff --git a/node_modules/react-native-compass-heading/android/src/main/AndroidManifest.xml b/node_modules/react-native-compass-heading/android/src/main/AndroidManifest.xml
index ba650eb..cd211a6 100644
--- a/node_modules/react-native-compass-heading/android/src/main/AndroidManifest.xml
+++ b/node_modules/react-native-compass-heading/android/src/main/AndroidManifest.xml
@@ -1,3 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.compassheading">
+  <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
+  <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
 </manifest>
diff --git a/node_modules/react-native-compass-heading/android/src/main/AndroidManifestNew.xml b/node_modules/react-native-compass-heading/android/src/main/AndroidManifestNew.xml
index a2f47b6..28a8ed4 100644
--- a/node_modules/react-native-compass-heading/android/src/main/AndroidManifestNew.xml
+++ b/node_modules/react-native-compass-heading/android/src/main/AndroidManifestNew.xml
@@ -1,2 +1,4 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android">
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
 </manifest>
diff --git a/node_modules/react-native-compass-heading/android/src/main/java/com/compassheading/CompassHeadingModule.kt b/node_modules/react-native-compass-heading/android/src/main/java/com/compassheading/CompassHeadingModule.kt
index d2bf0b2..a9744ab 100644
--- a/node_modules/react-native-compass-heading/android/src/main/java/com/compassheading/CompassHeadingModule.kt
+++ b/node_modules/react-native-compass-heading/android/src/main/java/com/compassheading/CompassHeadingModule.kt
@@ -1,156 +1,225 @@
 package com.compassheading
 
-import android.app.Activity
 import android.content.Context
+import android.hardware.GeomagneticField
 import android.hardware.Sensor
 import android.hardware.SensorEvent
 import android.hardware.SensorEventListener
 import android.hardware.SensorManager
+import android.location.Location
+import android.location.LocationListener
+import android.location.LocationManager
+import android.os.Bundle
 import android.util.Log
-import android.view.Surface
-import android.view.Display
-import android.view.WindowManager
-import com.facebook.react.bridge.*
 import com.facebook.react.modules.core.DeviceEventManagerModule
-import kotlin.math.abs
-import kotlin.math.PI
-
-class CompassHeadingModule(reactContext: ReactApplicationContext) :
-    ReactContextBaseJavaModule(reactContext), SensorEventListener {
+import com.facebook.react.bridge.*
+import kotlin.math.roundToInt
 
-    companion object {
-        const val NAME = "CompassHeading"
-    }
+// Main module class
+class CompassHeadingModule(private val reactContext: ReactApplicationContext) : 
+    ReactContextBaseJavaModule(), SensorEventListener, LocationListener {
     
-    private val mApplicationContext: Context = reactContext.applicationContext
-    private var mAzimuth: Int = 0 // degree
-    private var mFilter: Int = 1
+    private val TAG = "CompassHeading"
     private var sensorManager: SensorManager? = null
-    private val mGravity = FloatArray(3)
-    private val mGeomagnetic = FloatArray(3)
-    private val R = FloatArray(9)
-    private val I = FloatArray(9)
-
-    override fun getName(): String {
-        return NAME
+    private var locationManager: LocationManager? = null
+    private var rotationVectorSensor: Sensor? = null
+    private var currentLocation: Location? = null
+    private var azimuthAccuracy: Int = -1
+    private var latestData: List<Double>? = null
+
+    init {
+        sensorManager = reactContext.getSystemService(Context.SENSOR_SERVICE) as SensorManager?
+        locationManager = reactContext.getSystemService(Context.LOCATION_SERVICE) as LocationManager?
+        rotationVectorSensor = sensorManager?.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR)
     }
 
-    @ReactMethod
-    fun addListener(eventName: String) {
-        // Required for React Native built-in Event Emitter Calls
-    }
-
-    @ReactMethod
-    fun removeListeners(count: Int) {
-        // Required for React Native built-in Event Emitter Calls
+    override fun getName(): String {
+        return "CompassHeading"
     }
 
     @ReactMethod
     fun start(filter: Int, promise: Promise) {
-        try {
-            sensorManager = mApplicationContext.getSystemService(Context.SENSOR_SERVICE) as SensorManager
-            val gsensor = sensorManager?.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)
-            val msensor = sensorManager?.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD)
-            sensorManager?.registerListener(this, gsensor, SensorManager.SENSOR_DELAY_GAME)
-            sensorManager?.registerListener(this, msensor, SensorManager.SENSOR_DELAY_GAME)
-            mFilter = filter
-            Log.d(NAME, "Compass heading started with filter: $mFilter")
-            promise.resolve(true)
-        } catch (e: Exception) {
-            Log.e(NAME, "Failed to start compass heading: ${e.message}")
-            promise.reject("failed_start", e.message)
+        Log.d(TAG, "Starting compass updates")
+        rotationVectorSensor?.let { sensor ->
+            sensorManager?.registerListener(this, sensor, SensorManager.SENSOR_DELAY_NORMAL)
+        }
+        
+        if (hasLocationPermission()) {
+            try {
+                locationManager?.requestLocationUpdates(
+                    LocationManager.GPS_PROVIDER,
+                    1000,
+                    10f,
+                    this
+                )
+                promise.resolve(true)
+            } catch (e: SecurityException) {
+                Log.e(TAG, "Error requesting location updates", e)
+                promise.reject("failed_start", e.message)
+            }
         }
     }
 
     @ReactMethod
     fun stop() {
+        Log.d(TAG, "Stopping compass updates")
         sensorManager?.unregisterListener(this)
-        Log.d(NAME, "Compass heading stopped")
+        locationManager?.removeUpdates(this)
     }
 
-    @ReactMethod
-    fun hasCompass(promise: Promise) {
-        try {
-            val manager = mApplicationContext.getSystemService(Context.SENSOR_SERVICE) as SensorManager
-            val hasCompass = manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null &&
-                    manager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD) != null
-            promise.resolve(hasCompass)
-        } catch (e: Exception) {
-            Log.e(NAME, "Error checking for compass: ${e.message}")
-            promise.resolve(false)
-        }
+    private fun hasLocationPermission(): Boolean {
+        // if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+        //     return reactContext.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) 
+        //         == PackageManager.PERMISSION_GRANTED
+        // }
+        return true
     }
 
     override fun onSensorChanged(event: SensorEvent) {
-        val alpha = 0.97f
-        synchronized(this) {
-            when (event.sensor.type) {
-                Sensor.TYPE_ACCELEROMETER -> {
-                    mGravity[0] = alpha * mGravity[0] + (1 - alpha) * event.values[0]
-                    mGravity[1] = alpha * mGravity[1] + (1 - alpha) * event.values[1]
-                    mGravity[2] = alpha * mGravity[2] + (1 - alpha) * event.values[2]
-                }
-                Sensor.TYPE_MAGNETIC_FIELD -> {
-                    mGeomagnetic[0] = alpha * mGeomagnetic[0] + (1 - alpha) * event.values[0]
-                    mGeomagnetic[1] = alpha * mGeomagnetic[1] + (1 - alpha) * event.values[1]
-                    mGeomagnetic[2] = alpha * mGeomagnetic[2] + (1 - alpha) * event.values[2]
-                }
+        if (event.sensor.type == Sensor.TYPE_ROTATION_VECTOR) {
+            // if (azimuthAccuracy == SensorManager.SENSOR_STATUS_UNRELIABLE ||
+            //     azimuthAccuracy == SensorManager.SENSOR_STATUS_NO_CONTACT) {
+            //     return
+            // }
+
+            val rotationVector = RotationVector(event.values[0], event.values[1], event.values[2])
+            val magneticAzimuth = calculateAzimuth(rotationVector) ?: return
+            
+            var trueAzimuth = magneticAzimuth
+            currentLocation?.let { location ->
+                val magneticDeclination = getMagneticDeclination(location)
+                trueAzimuth = magneticAzimuth.plus(magneticDeclination)
             }
             
-            val success = SensorManager.getRotationMatrix(R, I, mGravity, mGeomagnetic)
-            if (success) {
-                val orientation = FloatArray(3)
-                SensorManager.getOrientation(R, orientation)
-                var newAzimuth = calculateHeading(orientation[0])
-
-                Log.d(NAME, "Raw azimuth: $newAzimuth")
-
-                val display = getDisplay()
-                display?.let {
-                    val rotation = it.rotation
-                    newAzimuth = when (rotation) {
-                        Surface.ROTATION_90 -> (newAzimuth + 270) % 360 // Fix for landscape-right
-                        Surface.ROTATION_270 -> (newAzimuth + 90) % 360 // Fix for landscape-left
-                        Surface.ROTATION_180 -> (newAzimuth + 180) % 360 // Fix for upside-down
-                        else -> newAzimuth // Default for portrait
-                    }
-                }
-
-                Log.d(NAME, "Adjusted azimuth after rotation: $newAzimuth")
-
-                if (abs(mAzimuth - newAzimuth) > mFilter) {
-                    mAzimuth = newAzimuth.toInt()
-                    val params = Arguments.createMap().apply {
-                        putDouble("heading", mAzimuth.toDouble())
-                        putDouble("accuracy", 1.0)
-                    }
-                    reactApplicationContext
-                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
-                        .emit("HeadingUpdated", params)
-                    Log.d(NAME, "Emitting HeadingUpdated event with azimuth: $mAzimuth")
-                }
+            val m = magneticAzimuth.degrees.toDouble()
+            val t = trueAzimuth.degrees.toDouble()
+            val a = azimuthAccuracy.toDouble()
+            
+            val data = listOf(m, t, a)
+            if (latestData == data) return
+            
+            latestData = data
+
+            // val params = Arguments.createArray()
+            // params.pushDouble(m)
+            // params.pushDouble(t)
+            // params.pushDouble(a)
+            val params = Arguments.createMap().apply {
+                putDouble("heading", t)
+                putDouble("accuracy", a)
             }
+            reactContext
+                .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
+                .emit("HeadingUpdated", params)
+            
+            // sendEvent("compassUpdate", params)
         }
     }
 
-    override fun onAccuracyChanged(sensor: Sensor, accuracy: Int) {}
+    override fun onAccuracyChanged(sensor: Sensor, accuracy: Int) {
+        azimuthAccuracy = accuracy
+    }
+
+    override fun onLocationChanged(location: Location) {
+        currentLocation = location
+    }
     
-    private fun getDisplay(): Display? {
-        return if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
-            reactApplicationContext.currentActivity?.display
-        } else {
-            (mApplicationContext.getSystemService(Context.WINDOW_SERVICE) as WindowManager).defaultDisplay
+    @Suppress("DEPRECATION")
+    override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {
+        // Required for older Android versions
+    }
+    
+    @Suppress("DEPRECATION")
+    override fun onProviderEnabled(provider: String) {
+        // Required for older Android versions
+    }
+    
+    @Suppress("DEPRECATION")
+    override fun onProviderDisabled(provider: String) {
+        // Required for older Android versions
+    }
+
+    private fun sendEvent(eventName: String, params: WritableArray?) {
+        reactContext
+            .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
+            .emit(eventName, params)
+    }
+    
+    // Utility functions
+    
+    private fun calculateAzimuth(rotationVector: RotationVector): Azimuth? {
+        val rotationMatrix = getRotationMatrix(rotationVector)
+        val orientationInRadians = SensorManager.getOrientation(rotationMatrix, FloatArray(3))
+        val azimuthInRadians = orientationInRadians[0]
+        val azimuthInDegrees = Math.toDegrees(azimuthInRadians.toDouble()).toFloat()
+        if (!azimuthInDegrees.isFinite()) {
+            return null
         }
+        return Azimuth(azimuthInDegrees)
     }
 
-    private fun calculateHeading(azimuth: Float): Double {
-        // Convert azimuth from radians to degrees
-        var heading = Math.toDegrees(azimuth.toDouble())
+    private fun getRotationMatrix(rotationVector: RotationVector): FloatArray {
+        val rotationMatrix = FloatArray(9)
+        SensorManager.getRotationMatrixFromVector(rotationMatrix, rotationVector.toArray())
+        return rotationMatrix
+    }
 
-        // Normalize the heading to [0, 360)
-        if (heading < 0) {
-            heading += 360
+    private fun getMagneticDeclination(location: Location): Float {
+        val latitude = location.latitude.toFloat()
+        val longitude = location.longitude.toFloat()
+        val altitude = location.altitude.toFloat()
+        val time = location.time
+        val geomagneticField = GeomagneticField(latitude, longitude, altitude, time)
+        return geomagneticField.declination
+    }
+}
+
+// Azimuth class
+class Azimuth(_degrees: Float) {
+    init {
+        if (!_degrees.isFinite()) {
+            throw IllegalArgumentException("Degrees must be finite but was '$_degrees'")
         }
-        return heading
     }
+
+    val degrees = normalizeAngle(_degrees)
+    val roundedDegrees = normalizeAngle(_degrees.roundToInt().toFloat()).toInt()
+
+    private fun normalizeAngle(angleInDegrees: Float): Float {
+        return (angleInDegrees + 360f) % 360f
+    }
+
+    override fun equals(other: Any?): Boolean {
+        if (this === other) return true
+        if (javaClass != other?.javaClass) return false
+
+        other as Azimuth
+        if (degrees != other.degrees) return false
+        return true
+    }
+
+    override fun hashCode(): Int {
+        return degrees.hashCode()
+    }
+
+    override fun toString(): String {
+        return "Azimuth(degrees=$degrees)"
+    }
+
+    operator fun plus(degrees: Float) = Azimuth(this.degrees + degrees)
+    operator fun minus(degrees: Float) = Azimuth(this.degrees - degrees)
+    operator fun compareTo(azimuth: Azimuth) = this.degrees.compareTo(azimuth.degrees)
+}
+
+// RotationVector class
+data class RotationVector(val x: Float, val y: Float, val z: Float) {
+    fun toArray(): FloatArray = floatArrayOf(x, y, z)
+}
+
+// Enum for display rotation
+enum class DisplayRotation {
+    ROTATION_0,
+    ROTATION_90,
+    ROTATION_180,
+    ROTATION_270
 }
\ No newline at end of file
diff --git a/node_modules/react-native-compass-heading/lib/commonjs/index.js b/node_modules/react-native-compass-heading/lib/commonjs/index.js
index f7803c1..045da06 100644
--- a/node_modules/react-native-compass-heading/lib/commonjs/index.js
+++ b/node_modules/react-native-compass-heading/lib/commonjs/index.js
@@ -24,7 +24,6 @@ CompassHeading.start = async (update_rate, callback) => {
   }
   const compassEventEmitter = new _reactNative.NativeEventEmitter(CompassHeading);
   listener = compassEventEmitter.addListener('HeadingUpdated', data => {
-    console.log('Received heading update:', data); // Debug incoming data
     callback(data);
   });
   const result = await _start(update_rate === null ? 0 : update_rate);
diff --git a/node_modules/react-native-compass-heading/lib/module/index.js b/node_modules/react-native-compass-heading/lib/module/index.js
index 6686ae2..91375f2 100644
--- a/node_modules/react-native-compass-heading/lib/module/index.js
+++ b/node_modules/react-native-compass-heading/lib/module/index.js
@@ -20,7 +20,6 @@ CompassHeading.start = async (update_rate, callback) => {
   }
   const compassEventEmitter = new NativeEventEmitter(CompassHeading);
   listener = compassEventEmitter.addListener('HeadingUpdated', data => {
-    console.log('Received heading update:', data); // Debug incoming data
     callback(data);
   });
   const result = await _start(update_rate === null ? 0 : update_rate);
diff --git a/node_modules/react-native-compass-heading/src/index.tsx b/node_modules/react-native-compass-heading/src/index.tsx
index 89db6a0..8ac785f 100644
--- a/node_modules/react-native-compass-heading/src/index.tsx
+++ b/node_modules/react-native-compass-heading/src/index.tsx
@@ -41,7 +41,6 @@ CompassHeading.start = async (
   listener = compassEventEmitter.addListener(
     'HeadingUpdated',
     (data: dataType) => {
-      console.log('Received heading update:', data); // Debug incoming data
       callback(data);
     }
   );
